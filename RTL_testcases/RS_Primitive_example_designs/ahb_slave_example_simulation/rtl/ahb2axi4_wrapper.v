// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : ahb2axi4_wrapper.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2023-12-14 12:57:20
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module ahb2axi4_wrapper #(
	parameter IP_TYPE 		= "AHB2AXI",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h2ec0e54
)
(    input  wire          s_ahb_aclk,
    input  wire          s_ahb_aresetn,
    output wire          m_axi_awvalid,
    input  wire          m_axi_awready,
    output wire   [31:0] m_axi_awaddr,
    output wire    [1:0] m_axi_awburst,
    output wire    [7:0] m_axi_awlen,
    output wire    [2:0] m_axi_awsize,
    output wire          m_axi_awlock,
    output wire    [2:0] m_axi_awprot,
    output wire    [3:0] m_axi_awcache,
    output wire    [3:0] m_axi_awqos,
    output wire    [3:0] m_axi_awregion,
    output wire          m_axi_awid,
    output wire          m_axi_awuser,
    output wire          m_axi_wvalid,
    input  wire          m_axi_wready,
    output wire          m_axi_wlast,
    output wire   [31:0] m_axi_wdata,
    output wire    [3:0] m_axi_wstrb,
    output wire          m_axi_wuser,
    input  wire          m_axi_bvalid,
    output wire          m_axi_bready,
    input  wire    [1:0] m_axi_bresp,
    input  wire          m_axi_bid,
    input  wire          m_axi_buser,
    output wire          m_axi_arvalid,
    input  wire          m_axi_arready,
    output wire   [31:0] m_axi_araddr,
    output wire    [1:0] m_axi_arburst,
    output wire    [7:0] m_axi_arlen,
    output wire    [2:0] m_axi_arsize,
    output wire          m_axi_arlock,
    output wire    [2:0] m_axi_arprot,
    output wire    [3:0] m_axi_arcache,
    output wire    [3:0] m_axi_arqos,
    output wire    [3:0] m_axi_arregion,
    output wire          m_axi_arid,
    output wire          m_axi_aruser,
    input  wire          m_axi_rvalid,
    output wire          m_axi_rready,
    input  wire          m_axi_rlast,
    input  wire    [1:0] m_axi_rresp,
    input  wire   [31:0] m_axi_rdata,
    input  wire          m_axi_rid,
    input  wire          m_axi_ruser,
    input  wire   [31:0] ahb_haddr,
    input  wire    [2:0] ahb_hburst,
    input  wire          ahb_hmastlock,
    input  wire    [3:0] ahb_hprot,
    input  wire    [2:0] ahb_hsize,
    input  wire    [1:0] ahb_htrans,
    input  wire          ahb_hwrite,
    input  wire   [31:0] ahb_hwdata,
    input  wire          ahb_hsel,
    input  wire          ahb_hreadyin,
    input  wire          ahb_hnonsec,
    output wire   [31:0] ahb_hrdata,
    output wire          ahb_hreadyout,
    output wire          ahb_hresp
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          aw_valid;
wire          aw_ready;
wire   [31:0] aw_payload_addr;
wire    [1:0] aw_payload_burst;
wire    [7:0] aw_payload_len;
wire    [2:0] aw_payload_size;
reg           aw_payload_lock = 1'd0;
wire    [2:0] aw_payload_prot;
reg     [3:0] aw_payload_cache = 4'd0;
reg     [3:0] aw_payload_qos = 4'd0;
reg     [3:0] aw_payload_region = 4'd0;
wire          aw_param_id;
reg           aw_param_user = 1'd0;
wire          w_valid;
wire          w_ready;
wire          w_last;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
reg           w_param_user = 1'd0;
wire          b_valid;
wire          b_ready;
wire    [1:0] b_payload_resp;
wire          b_param_id;
wire          b_param_user;
wire          ar_valid;
wire          ar_ready;
wire   [31:0] ar_payload_addr;
wire    [1:0] ar_payload_burst;
wire    [7:0] ar_payload_len;
wire    [2:0] ar_payload_size;
reg           ar_payload_lock = 1'd0;
wire    [2:0] ar_payload_prot;
reg     [3:0] ar_payload_cache = 4'd0;
reg     [3:0] ar_payload_qos = 4'd0;
reg     [3:0] ar_payload_region = 4'd0;
wire          ar_param_id;
reg           ar_param_user = 1'd0;
wire          r_valid;
wire          r_ready;
wire          r_last;
wire    [1:0] r_payload_resp;
wire   [31:0] r_payload_data;
wire          r_param_id;
wire          r_param_user;
wire   [31:0] ahb_haddr_1;
wire    [2:0] ahb_hburst_1;
wire          ahb_hmastlock_1;
wire    [3:0] ahb_hprot_1;
wire    [2:0] ahb_hsize_1;
wire    [1:0] ahb_htrans_1;
wire          ahb_hwrite_1;
wire   [31:0] ahb_hwdata_1;
wire          ahb_hsel_1;
wire          ahb_hreadyin_1;
wire          ahb_hnonsec_1;
wire   [31:0] ahb_hrdata_1;
wire          ahb_hreadyout_1;
wire          ahb_hresp_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = s_ahb_aclk;
assign sys_rst = s_ahb_aresetn;
assign m_axi_awvalid = aw_valid;
assign m_axi_awaddr = aw_payload_addr;
assign m_axi_awburst = aw_payload_burst;
assign m_axi_awlen = aw_payload_len;
assign m_axi_awsize = aw_payload_size;
assign m_axi_awlock = aw_payload_lock;
assign m_axi_awprot = aw_payload_prot;
assign m_axi_awcache = aw_payload_cache;
assign m_axi_awqos = aw_payload_qos;
assign m_axi_awregion = aw_payload_region;
assign m_axi_awid = aw_param_id;
assign m_axi_awuser = aw_param_user;
assign aw_ready = m_axi_awready;
assign m_axi_wvalid = w_valid;
assign m_axi_wdata = w_payload_data;
assign m_axi_wstrb = w_payload_strb;
assign m_axi_wuser = w_param_user;
assign m_axi_wlast = w_last;
assign w_ready = m_axi_wready;
assign b_valid = m_axi_bvalid;
assign b_payload_resp = m_axi_bresp;
assign b_param_id = m_axi_bid;
assign b_param_user = m_axi_buser;
assign m_axi_bready = b_ready;
assign m_axi_arvalid = ar_valid;
assign m_axi_araddr = ar_payload_addr;
assign m_axi_arburst = ar_payload_burst;
assign m_axi_arlen = ar_payload_len;
assign m_axi_arsize = ar_payload_size;
assign m_axi_arlock = ar_payload_lock;
assign m_axi_arprot = ar_payload_prot;
assign m_axi_arcache = ar_payload_cache;
assign m_axi_arqos = ar_payload_qos;
assign m_axi_arregion = ar_payload_region;
assign m_axi_arid = ar_param_id;
assign m_axi_aruser = ar_param_user;
assign ar_ready = m_axi_arready;
assign r_valid = m_axi_rvalid;
assign r_payload_resp = m_axi_rresp;
assign r_payload_data = m_axi_rdata;
assign r_param_id = m_axi_rid;
assign r_param_user = m_axi_ruser;
assign r_last = m_axi_rlast;
assign m_axi_rready = r_ready;
assign ahb_haddr_1 = ahb_haddr;
assign ahb_hburst_1 = ahb_hburst;
assign ahb_hmastlock_1 = ahb_hmastlock;
assign ahb_hprot_1 = ahb_hprot;
assign ahb_hsize_1 = ahb_hsize;
assign ahb_htrans_1 = ahb_htrans;
assign ahb_hwrite_1 = ahb_hwrite;
assign ahb_hwdata_1 = ahb_hwdata;
assign ahb_hsel_1 = ahb_hsel;
assign ahb_hreadyin_1 = ahb_hreadyin;
assign ahb_hnonsec_1 = ahb_hnonsec;
assign ahb_hrdata = ahb_hrdata_1;
assign ahb_hreadyout = ahb_hreadyout_1;
assign ahb_hresp = ahb_hresp_1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

ahb_to_axi4 #(
	// .IP_ID(IP_ID),
	// .IP_TYPE(IP_TYPE),
	// .IP_VERSION(IP_VERSION),
	.Address_Width(32),
	.Data_Width(32),
	.ID_WIDTH(1)
) ahb_to_axi4 (
	.ahb_haddr(ahb_haddr_1),
	.ahb_hburst(ahb_hburst_1),
	.ahb_hmastlock(ahb_hmastlock_1),
	.ahb_hnonsec(ahb_hnonsec_1),
	.ahb_hprot(ahb_hprot_1),
	.ahb_hreadyin(ahb_hreadyin_1),
	.ahb_hsel(ahb_hsel_1),
	.ahb_hsize(ahb_hsize_1),
	.ahb_htrans(ahb_htrans_1),
	.ahb_hwdata(ahb_hwdata_1),
	.ahb_hwrite(ahb_hwrite_1),
	.axi_arready(ar_ready),
	.axi_awready(aw_ready),
	.axi_bid(b_param_id),
	.axi_bresp(b_payload_resp),
	.axi_bvalid(b_valid),
	.axi_rdata(r_payload_data),
	.axi_rid(r_param_id),
	.axi_rresp(r_payload_resp),
	.axi_rvalid(r_valid),
	.axi_wready(w_ready),
	.clk(sys_clk),
	.rst_l(sys_rst),
	.ahb_hrdata(ahb_hrdata_1),
	.ahb_hreadyout(ahb_hreadyout_1),
	.ahb_hresp(ahb_hresp_1),
	.axi_araddr(ar_payload_addr),
	.axi_arburst(ar_payload_burst),
	.axi_arid(ar_param_id),
	.axi_arlen(ar_payload_len),
	.axi_arprot(ar_payload_prot),
	.axi_arsize(ar_payload_size),
	.axi_arvalid(ar_valid),
	.axi_awaddr(aw_payload_addr),
	.axi_awburst(aw_payload_burst),
	.axi_awid(aw_param_id),
	.axi_awlen(aw_payload_len),
	.axi_awprot(aw_payload_prot),
	.axi_awsize(aw_payload_size),
	.axi_awvalid(aw_valid),
	.axi_bready(b_ready),
	.axi_rready(r_ready),
	.axi_wdata(w_payload_data),
	.axi_wlast(w_last),
	.axi_wstrb(w_payload_strb),
	.axi_wvalid(w_valid)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-12-14 12:57:20.
//------------------------------------------------------------------------------
