//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE4(

	//////////// CLOCK //////////
	GCLKIN,
	GCLKOUT_FPGA,
	OSC_50_BANK2,
	OSC_50_BANK3,
	OSC_50_BANK4,
	OSC_50_BANK5,
	OSC_50_BANK6,
	OSC_50_BANK7,
	PLL_CLKIN_p,

	//////////// 3-Ports High-Speed USB OTG //////////
	OTG_A,
	OTG_CS_n,
	OTG_D,
	OTG_DC_DACK,
	OTG_DC_DREQ,
	OTG_DC_IRQ,
	OTG_HC_DACK,
	OTG_HC_DREQ,
	OTG_HC_IRQ,
	OTG_OE_n,
	OTG_RESET_n,
	OTG_WE_n,

	//////////// DDR2 SODIMM, DDR2 SODIMM_0 //////////
	M1_DDR2_addr,
	M1_DDR2_ba,
	M1_DDR2_cas_n,
	M1_DDR2_cke,
	M1_DDR2_clk,
	M1_DDR2_clk_n,
	M1_DDR2_cs_n,
	M1_DDR2_dm,
	M1_DDR2_dq,
	M1_DDR2_dqs,
	M1_DDR2_dqsn,
	M1_DDR2_odt,
	M1_DDR2_ras_n,
	M1_DDR2_SA,
	M1_DDR2_SCL,
	M1_DDR2_SDA,
	M1_DDR2_we_n,
	RUP,
	RDN,
	
	//////////// Current //////////
	CSENSE_ADC_FO,
	CSENSE_CS_n,
	CSENSE_SCK,
	CSENSE_SDI,
	CSENSE_SDO
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		GCLKIN;
output		          		GCLKOUT_FPGA;
input		          		OSC_50_BANK2;
input		          		OSC_50_BANK3;
input		          		OSC_50_BANK4;
input		          		OSC_50_BANK5;
input		          		OSC_50_BANK6;
input		          		OSC_50_BANK7;
input		          		PLL_CLKIN_p;

//////////// 3-Ports High-Speed USB OTG //////////
output		    [17:1]		OTG_A;
output		          		OTG_CS_n;
inout		    [31:0]		OTG_D;
output		          		OTG_DC_DACK;
input		          		OTG_DC_DREQ;
input		          		OTG_DC_IRQ;
output		          		OTG_HC_DACK;
input		          		OTG_HC_DREQ;
input		          		OTG_HC_IRQ;
output		          		OTG_OE_n;
output		          		OTG_RESET_n;
output		          		OTG_WE_n;

//////////// Current //////////
output		          	CSENSE_ADC_FO;
output		[1:0]			CSENSE_CS_n;
output		          	CSENSE_SCK;
output		          	CSENSE_SDI;
input		          		CSENSE_SDO;

//////////// DDR2 SODIMM, DDR2 SODIMM_0 //////////
output		    [15:0]		M1_DDR2_addr;
output		     [2:0]		M1_DDR2_ba;
output		          		M1_DDR2_cas_n;
output		     [1:0]		M1_DDR2_cke;
inout		     [1:0]		M1_DDR2_clk;
inout		     [1:0]		M1_DDR2_clk_n;
output		     [1:0]		M1_DDR2_cs_n;
output		     [7:0]		M1_DDR2_dm;
inout		    [63:0]		M1_DDR2_dq;
inout		     [7:0]		M1_DDR2_dqs;
inout		     [7:0]		M1_DDR2_dqsn;
output		     [1:0]		M1_DDR2_odt;
output		          		M1_DDR2_ras_n;
output		     [1:0]		M1_DDR2_SA;
output		          		M1_DDR2_SCL;
inout		          		M1_DDR2_SDA;
output		          		M1_DDR2_we_n;

input RUP;
input RDN;

//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

//
// DDR controller
//

assign M1_DDR2_SDA = 1'bz;
assign M1_DDR2_SCL = 1'b0;

wire ddr_ready;
wire ddr_burstbegin;
wire [29:0] ddr_address;
wire ddr_readdatavalid;
wire [255:0] ddr_readdata;
wire [255:0] ddr_writedata;
wire [31:0] ddr_be;
wire ddr_read;
wire ddr_write;
wire [5:0] ddr_burstcount;

wire clk_ddr;
wire resetn_ddr;

ddr ddr_inst
(
	.pll_ref_clk (OSC_50_BANK4),
	.afi_clk (clk_ddr),
	.afi_reset_n(resetn_ddr),
	.global_reset_n (reset_n),
	.soft_reset_n (1'b1),

	.avl_ready(ddr_ready),
	.avl_burstbegin(ddr_burstbegin),
	.avl_addr(ddr_address[29:5]),
	.avl_rdata_valid(ddr_readdatavalid),
	.avl_rdata(ddr_readdata),
	.avl_wdata(ddr_writedata),
	.avl_be(ddr_be),
	.avl_read_req(ddr_read),
	.avl_write_req(ddr_write),
	.avl_size(ddr_burstcount),
	
	.mem_a (M1_DDR2_addr[13:0]),
	.mem_ba (M1_DDR2_ba),
	.mem_cas_n (M1_DDR2_cas_n),
	.mem_cke (M1_DDR2_cke[0]),
	.mem_ck (M1_DDR2_clk),
	.mem_ck_n (M1_DDR2_clk_n),
	.mem_cs_n (M1_DDR2_cs_n[0]),
	.mem_dm (M1_DDR2_dm),
	.mem_dq (M1_DDR2_dq),
	.mem_dqs (M1_DDR2_dqs),
	.mem_dqs_n (M1_DDR2_dqsn),
	.mem_odt (M1_DDR2_odt[0]),
	.mem_ras_n (M1_DDR2_ras_n),
	.mem_we_n (M1_DDR2_we_n),
	
	.oct_rup(RUP),
	.oct_rdn(RDN)
);

//
// Reset generator
//

reg reset_n;
reg [3:0] reset_n_counter;

initial begin
	reset_n = 1'b0;
	reset_n_counter = 4'd0;
end

always @ (posedge OSC_50_BANK2) begin
	if (reset_n == 1'b0) begin
		reset_n_counter <= reset_n_counter + 4'd1;
	end
	
	if (reset_n_counter == 4'b1111) begin
		reset_n <= 1'b1;
	end
end

//
// Clock generator
//

(* keep = 1 *) wire clk_a;
pll the_pll_inst
(
	.inclk0(OSC_50_BANK6),
	.c0(clk_a),
	.areset(~reset_n)
);


//
// Portmux
//

wire [31:0] usb_address;
wire usb_address_want;
wire usb_address_ready;
wire [31:0] usb_writedata;
wire usb_writedata_want;
wire usb_writedata_ready;
wire [31:0] usb_readdata;
wire usb_readdata_want;
wire usb_readdata_ready;

usb_portmux usb_portmux_inst
(
	.reset_n(reset_n),
	.clk(clk_ddr),
	
	.i_address(usb_address),
	.o_address_want(usb_address_want),
	.i_address_ready(usb_address_ready),
	.i_writedata(usb_writedata),
	.o_writedata_want(usb_writedata_want),
	.i_writedata_ready(usb_writedata_ready),
	.o_readdata(usb_readdata),
	.i_readdata_want(usb_readdata_want),
	.o_readdata_ready(usb_readdata_ready),
	
	.OSC1_50(OSC_50_BANK2),
	.OTG_D(OTG_D),
	.OTG_A(OTG_A),
	.OTG_CS_n(OTG_CS_n),
	.OTG_WE_n(OTG_WE_n),
	.OTG_OE_n(OTG_OE_n),
	.OTG_HC_IRQ(OTG_HC_IRQ),
	.OTG_DC_IRQ(OTG_DC_IRQ),
	.OTG_RESET_n(OTG_RESET_n),
	.OTG_HC_DREQ(OTG_HC_DREQ),
	.OTG_HC_DACK(OTG_HC_DACK),
	.OTG_DC_DREQ(OTG_DC_DREQ),
	.OTG_DC_DACK(OTG_DC_DACK)
);

//
// Main system
//

system u0
(
	.ddr_clk_clk         (clk_ddr),         
	.reset_reset   (!reset_n),   
	.ddr_waitrequest     (!ddr_ready),     //        ddr.waitrequest
	.ddr_read            (ddr_read),            //           .read
	.ddr_burstcount      (ddr_burstcount),      //           .burstcount
	.ddr_address         (ddr_address),         //           .address
	.ddr_byteenable      (ddr_be),      //           .byteenable
	.ddr_burstbegin      (ddr_burstbegin),      //           .burstbegin
	.ddr_readdatavalid   (ddr_readdatavalid),   //           .readdatavalid
	.ddr_readdata        (ddr_readdata),        //           .readdata
	.ddr_writedata       (ddr_writedata),       //           .writedata
	.ddr_write           (ddr_write),           //           .write
	.usb_writedata_ready (usb_writedata_ready), //        usb.writedata_ready
	.usb_address         (usb_address),         //           .address
	.usb_address_want    (usb_address_want),    //           .address_want
	.usb_readdata_want   (usb_readdata_want),   //           .readdata_want
	.usb_writedata_want  (usb_writedata_want),  //           .writedata_want
	.usb_writedata       (usb_writedata),       //           .writedata
	.usb_readdata_ready  (usb_readdata_ready),  //           .readdata_ready
	.usb_readdata        (usb_readdata),        //           .readdata
	.usb_address_ready   (usb_address_ready),   //           .address_ready
   .comp_clk_clk      (clk_a)       //         .clk1x
);

endmodule
