
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE4(

	//////////// CLOCK //////////
	GCLKIN,
	GCLKOUT_FPGA,
	OSC_50_BANK2,
	OSC_50_BANK3,
	OSC_50_BANK4,
	OSC_50_BANK5,
	OSC_50_BANK6,
	OSC_50_BANK7,
	PLL_CLKIN_p,

	//////////// Current //////////
	CSENSE_ADC_FO,
	CSENSE_CS_n,
	CSENSE_SCK,
	CSENSE_SDI,
	CSENSE_SDO,

	//////////// 3-Ports High-Speed USB OTG //////////
	OTG_A,
	OTG_CS_n,
	OTG_D,
	OTG_DC_DACK,
	OTG_DC_DREQ,
	OTG_DC_IRQ,
	OTG_HC_DACK,
	OTG_HC_DREQ,
	OTG_HC_IRQ,
	OTG_OE_n,
	OTG_RESET_n,
	OTG_WE_n 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input								GCLKIN;
output							GCLKOUT_FPGA;
input								OSC_50_BANK2;
input								OSC_50_BANK3;
input								OSC_50_BANK4;
input								OSC_50_BANK5;
input								OSC_50_BANK6;
input								OSC_50_BANK7;
input								PLL_CLKIN_p;

//////////// Current //////////
output		          		CSENSE_ADC_FO;
output			[1:0]			CSENSE_CS_n;
output		          		CSENSE_SCK;
output		          		CSENSE_SDI;
input								CSENSE_SDO;

//////////// 3-Ports High-Speed USB OTG //////////
output			[17:1]		OTG_A;
output		          		OTG_CS_n;
inout				[31:0]		OTG_D;
output		          		OTG_DC_DACK;
input								OTG_DC_DREQ;
input								OTG_DC_IRQ;
output		          		OTG_HC_DACK;
input								OTG_HC_DREQ;
input								OTG_HC_IRQ;
output		          		OTG_OE_n;
output		          		OTG_RESET_n;
output		          		OTG_WE_n;


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================


//
// Reset generator
//

reg 			reset_n;
reg	[3:0]	reset_n_counter;

initial begin
	reset_n = 1'b0;
	reset_n_counter = 4'd0;
end

always @ (posedge OSC_50_BANK2) begin
	if (reset_n == 1'b0) begin
		reset_n_counter <= reset_n_counter + 4'd1;
	end
	
	if (reset_n_counter == 4'b1111) begin
		reset_n <= 1'b1;
	end
end

//
// Clock Generator
//
(* keep = 1 *) wire clk_200;
pll pll_inst
(
	.areset(~reset_n),
	.inclk0(OSC_50_BANK2),
	.c0(clk_200)
);

//
// Portmux
//

wire	[31:0]	usb_address;
wire				usb_address_want;
wire				usb_address_ready;
wire	[31:0]	usb_writedata;
wire				usb_writedata_want;
wire				usb_writedata_ready;
wire	[31:0]	usb_readdata;
wire				usb_readdata_want;
wire				usb_readdata_ready;

usb_portmux usb_portmux_inst
(
	.reset_n(reset_n),
	.clk(clk_200),
	
	.i_address(usb_address),
	.o_address_want(usb_address_want),
	.i_address_ready(usb_address_ready),
	.i_writedata(usb_writedata),
	.o_writedata_want(usb_writedata_want),
	.i_writedata_ready(usb_writedata_ready),
	.o_readdata(usb_readdata),
	.i_readdata_want(usb_readdata_want),
	.o_readdata_ready(usb_readdata_ready),
	
	.OSC1_50(OSC_50_BANK2),
	.OTG_D(OTG_D),
	.OTG_A(OTG_A),
	.OTG_CS_n(OTG_CS_n),
	.OTG_WE_n(OTG_WE_n),
	.OTG_OE_n(OTG_OE_n),
	.OTG_HC_IRQ(OTG_HC_IRQ),
	.OTG_DC_IRQ(OTG_DC_IRQ),
	.OTG_RESET_n(OTG_RESET_n),
	.OTG_HC_DREQ(OTG_HC_DREQ),
	.OTG_HC_DACK(OTG_HC_DACK),
	.OTG_DC_DREQ(OTG_DC_DREQ),
	.OTG_DC_DACK(OTG_DC_DACK)
);


//
// Main system
//
 hh_system u0 (
	  .clk_clk                            (clk_200),					//                clk.clk
	  .reset_reset_n                      (reset_n),					//              reset.reset_n
	  .ports2avalon_0_usb_address         (usb_address),				// ports2avalon_0_usb.address
	  .ports2avalon_0_usb_address_ready   (usb_address_ready),		//                   .address_ready
	  .ports2avalon_0_usb_writedata       (usb_writedata),			//                   .writedata
	  .ports2avalon_0_usb_writedata_ready (usb_writedata_ready),	//                   .writedata_ready
	  .ports2avalon_0_usb_readdata        (usb_readdata),				//                   .readdata
	  .ports2avalon_0_usb_readdata_ready  (usb_readdata_ready),		//                   .readdata_ready
	  .ports2avalon_0_usb_address_want    (usb_address_want),		//                   .address_want
	  .ports2avalon_0_usb_writedata_want  (usb_writedata_want),		//                   .writedata_want
	  .ports2avalon_0_usb_readdata_want   (usb_readdata_want)		//                   .readdata_want
 );

endmodule

// vim: set sw=2 ts=2 sts=2 expandtab
