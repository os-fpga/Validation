// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : dsp_AB_36x36_Pipeline_v1_0.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2024-02-22 14:41:19
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module dsp_AB_36x36_Pipeline #(
	parameter IP_TYPE 		= "DSPG",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h5622a53
)
(
    input  wire   [35:0] a,
    input  wire   [35:0] b,
    input  wire          clk,
    input  wire          reset,
    output wire   [71:0] z
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire signed  [35:0] a_1;
wire signed  [35:0] b_1;
wire    [2:0] sum;
wire    [2:0] fb;
reg           a0 = 1'd0;
reg           a1 = 1'd0;
reg           b0 = 1'd0;
reg           b1 = 1'd0;
wire signed  [18:0] a3;
wire signed  [18:0] b3;
wire          unsigneda;
wire          unsignedb;
wire signed  [37:0] z1;
wire signed  [37:0] z2;
wire signed  [37:0] z3;
wire   [71:0] z_1;
wire   [71:0] z_2;
reg     [2:0] sum_reg = 3'd1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign a_1 = a;
assign b_1 = b;
assign sys_clk = clk;
assign sys_rst = reset;
assign z = z_1;
assign fb = ((sum != 2'd2) ? 1'd1 : 1'd0);
assign a3 = ((sum != 2'd2) ? a0 : a1);
assign b3 = ((sum != 2'd2) ? b1 : b0);
assign unsigneda = ((sum != 2'd2) ? 1'd1 : 1'd1);
assign unsignedb = ((sum != 2'd2) ? 1'd1 : 1'd1);
assign z_1 = ((sum == 2'd3) ? (((z3 <<< 5'd18) + z1) + (z2 <<< 6'd36)) : $signed({1'd0, z_2}));
assign sum = sum_reg;
assign z_2 = z_1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    sum_reg <= (sum_reg + 1'd1);
    if ((sum_reg == 2'd3)) begin
        sum_reg <= 2'd2;
    end
    if (sys_rst) begin
        sum_reg <= 3'd1;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

DSP38 #(
	.DSP_MODE("MULTIPLY"),
	.INPUT_REG_EN("TRUE"),
	.OUTPUT_REG_EN("TRUE")
) DSP38 (
	.A(a0),
	.B(b0),
	.CLK(sys_clk),
	.FEEDBACK(1'd0),
	.RESET(sys_rst),
	.UNSIGNED_A(1'd1),
	.UNSIGNED_B(1'd1),
	.Z(z1)
);

DSP38 #(
	.DSP_MODE("MULTIPLY_ACCUMULATE"),
	.INPUT_REG_EN("FALSE"),
	.OUTPUT_REG_EN("FALSE")
) DSP38_1 (
	.A(a3),
	.B(b3),
	.CLK(sys_clk),
	.FEEDBACK(fb),
	.LOAD_ACC(1'd1),
	.RESET(sys_rst),
	.ROUND(1'd0),
	.SATURATE(1'd0),
	.SHIFT_RIGHT(1'd0),
	.SUBTRACT(1'd0),
	.UNSIGNED_A(unsigneda),
	.UNSIGNED_B(unsignedb),
	.Z(z3)
);

DSP38 #(
	.DSP_MODE("MULTIPLY"),
	.INPUT_REG_EN("TRUE"),
	.OUTPUT_REG_EN("TRUE")
) DSP38_2 (
	.A(a1),
	.B(b1),
	.CLK(sys_clk),
	.FEEDBACK(1'd0),
	.RESET(sys_rst),
	.UNSIGNED_A(1'd1),
	.UNSIGNED_B(1'd1),
	.Z(z2)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-02-22 14:41:19.
//------------------------------------------------------------------------------
